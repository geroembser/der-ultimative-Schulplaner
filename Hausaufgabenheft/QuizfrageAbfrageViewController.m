//
//  QuizfrageAbfrageViewController.m
//  Hausaufgabenheft
//
//  Created by Gero Embser on 28.02.16.
//  Copyright ¬© 2016 Bisch√∂fliche Marienschule M√∂nchengladbach. All rights reserved.
//

#import "QuizfrageAbfrageViewController.h"
#import "Antwort.h"
#import "Kurs.h"
#import "Themenbereich.h"
#import "NSDate+AdvancedDate.h"

@interface QuizfrageAbfrageViewController ()
///der Array, der die Zeiger zu alle Buttons enth√§lt, die f√ºr Antworten genutzt werden k√∂nnen --> das Nutzen eines Arrays anstatt der statischen Programmierung kann sp√§ter vielleicht einmal Vorteile bringen
@property NSArray <AntwortButton *> *alleAntwortenButtons;
///gibt an, ob die Frage gel√∂st wurde
@property BOOL frageGeloest;
///gibt an, ob die Frage richtig gel√∂st wurde --> in abh√§ngigkeit zur frageGeloest-Property
@property BOOL frageRichtigGeloest;
///gibt an, ob nur das Ergebnis angezeigt werden soll, oder ob auch die M√∂glichkeit zur Beantwortung der Frage bestehen soll
@property BOOL nurAnzeigeVonErgebnis;
@end

@implementation QuizfrageAbfrageViewController


#pragma mark - Initialisierung
- (instancetype)init {
    self = [[UIStoryboard storyboardWithName:@"Main" bundle:nil]instantiateViewControllerWithIdentifier:@"quizfrageAbfrageViewController"];
    
    if (self) {
        
    }
    
    return self;
}

- (instancetype)initWithFrage:(Frage *)frage alsTeilVomQuiz:(Quiz *)quiz {
    self = [self init];
    
    if (self) {
        if (frage && quiz) {
            self.quiz = quiz;
            self.frage = frage;
        }
    }
    
    return self;
}

- (instancetype)initWithFrage:(Frage *)frage alsTeilVomQuiz:(Quiz *)quiz isAnzeigeVonErgebnis:(BOOL)isErgebnis {
    //erstmal mit bereits vorhandener, anderer Initialisierungsmethode initialisieren
    self = [self initWithFrage:frage alsTeilVomQuiz:quiz];
    
    if (self) {
        //wenn isErgebnis=YES, dann setze die entsprechende Instanzvariable/das entsprechende Attribut des Objekt
        self.nurAnzeigeVonErgebnis = isErgebnis;
    }
    
    return self;
}



#pragma mark - View-Setup
- (void)viewDidLoad {
    [super viewDidLoad];
    
    //den Array mit den Zeigern zu allen Antworten-Buttons erstellen
    self.alleAntwortenButtons = @[self.antwortButton1, self.antwortButton2, self.antwortButton3, self.antwortButton4];
    
    //Die Frage richtig im user interface anzeigen
    
    //die Anzahl der Fragen setzen
    self.fragenNummerLabel.text = [NSString stringWithFormat:@"Frage %lu von %lu", [self.quiz indexOfFrageInAllenFragen:self.frage]+1, self.quiz.numberOfQuestions]; //[self.quiz indexOfFrageInAllenFragen:self.frage]+1, weil der Index immer bei 0 anf√§ngt und au√üer der Informatiker wahrscheinlich keiner anf√§ngt, bei null zu z√§hlen üòÇ
    
    //den Fragen-Text anzeigen, in dem Format, wie es im Storyboard festgelegt ist
    self.frageTextView.selectable = YES; //vorher auf YES setzen...
    self.frageTextView.text = self.frage.frage;
    self.frageTextView.selectable = NO; //...nachher auf NO setzen, weil sonst - warum auch immer - bei jedem neuen Setzen von Text in den TextView, das Textformat resettet wird.
    
    //die Antworten setzen
    //daf√ºr alle Antworten der Frage erhalten
    NSArray *antworten = [self.frage antwortenFuerFrageSortiertZufaellig:YES mitRichtigerFrageInnerhalbDerErstenElemente:4]; //letzter Parameter ist gleich 4, weil 4 Antwort-Buttons verf√ºgbar sind
    
    
    for (int i = 0; i < self.alleAntwortenButtons.count; i++) {
        //den jeweiligen Button des Schleifendurchlaufs bekommen
        AntwortButton *antwortButton = [self.alleAntwortenButtons objectAtIndex:i];
        
        //√ºberpr√ºfen, der Antworten-Array auch eine Antwort f√ºr den Button-i hat
        if (i < antworten.count) {
            //die jweilige Antwort
            Antwort *antwortFuerButton = [antworten objectAtIndex:i];

            //die Antwort in den Button setzen
            [antwortButton setzeAntwort:antwortFuerButton];
            
            //wenn f√ºr den jeweiligen Button die tempor√§re Property gesetzt ist, die angibt, dass diese Antwort in einem Quiz ausgew√§hlt wurde und sich dieser Controller in dem Modus befindet, dass "nurAnzeigeVonErgebnis" und keine Beantwortung erlaubt ist --> dann markiere den entsprechenden Button als ausgew√§hlt bzw. richtig oder falsch --> eigentlich nur wichtig f√ºr die Anzeige der Frage, wenn das Ergebnis der letzten Bearbeitung angezeigt werden soll
            if (self.nurAnzeigeVonErgebnis) {
                if (antwortFuerButton.gesetzteAntwort == AntwortRichtig) {
                    //die Antwort als richtig darstellen
                    [antwortButton markiereAlsRichtig:YES];
                }
                else if (antwortFuerButton.gesetzteAntwort == AntwortFalsch) {
                    //die Antwort als falsch anzeigen
                    [antwortButton markiereAlsRichtig:NO];
                    
                }
                //den jeweiligen Antwort-Button deaktivieren, weil der Benutzer nicht mehr die M√∂glichkeit bekommen darf, auf die Frage erneut zu antworten
                antwortButton.enabled = NO;
            }
        }
        //wenn keine Antwort mehr verf√ºgbar ist, dann deaktiviere den antwort-Button und setze einen leeren Titel in den Button
        else {
            //setze einen leeren Titel in den Button
            [antwortButton setTitle:@"" forState:UIControlStateNormal];
            
            //deaktiviere diesen
            antwortButton.enabled = NO;
        }
        
    }
    
    //den Text im Label setzen, das die ID f√ºr die Frage angeben soll
    self.frageIDLabel.text = [NSString stringWithFormat:@"Frage %@", self.frage.id.stringValue];
    
    //den Text im Detail-Label setzen
    //der String, der im Detail-Label angezeigt werden soll
    NSString *detailLabelString = @"";
    
    //der String f√ºr den Namen des Themenbereichs
    if (self.frage.themenbereich) {
        NSString *themaString = self.frage.themenbereich.name;
        //wenn der String leer ist oder keiner ist, dann h√§nge ihn nicht an den detailLabelString, ansonsten schon
        if (themaString.length > 0 && ![themaString isEqualToString:@""]) {
            detailLabelString = [detailLabelString stringByAppendingFormat:@"%@; ", themaString]; //Semikolon und Leerzeichen am Anfang, damit die Teile voneinander getrennt sind
        }
    }
    
    //den String f√ºr den Kurs, aber nur wenn ein Kurs mit der Frage verbunden wurde und dieser auch existiert
    if (self.frage.kurs) {
        NSString *kursString = self.frage.kurs.id; //die ID des Kurses setzen
        //wenn der String leer ist oder keiner ist, dann h√§nge ihn nicht an den detailLabelString, ansonsten schon
        if (kursString.length > 0 && ![kursString isEqualToString:@""]) {
            detailLabelString = [detailLabelString stringByAppendingFormat:@"%@", kursString];
        }
    }

    //alternativ w√§re auch die folgende Anzeige der Daten im Detail-Label m√∂glich
//    //den String f√ºr den Kurs, aber nur wenn ein Kurs mit der Frage verbunden wurde und dieser auch existiert
//    if (self.frage.kurs) {
//        NSString *kursString = self.frage.kurs.id; //die ID des Kurses setzen
//        //wenn der String leer ist oder keiner ist, dann h√§nge ihn nicht an den detailLabelString, ansonsten schon
//        if (kursString.length > 0 && ![kursString isEqualToString:@""]) {
//            detailLabelString = [detailLabelString stringByAppendingFormat:@"Kurs: %@", kursString];
//        }
//    }
//    
//    //der String f√ºr den Namen des Themenbereichs
//    if (self.frage.themenbereich) {
//        NSString *themaString = self.frage.themenbereich.name;
//        //wenn der String leer ist oder keiner ist, dann h√§nge ihn nicht an den detailLabelString, ansonsten schon
//        if (themaString.length > 0 && ![themaString isEqualToString:@""]) {
//            detailLabelString = [detailLabelString stringByAppendingFormat:@"; Themenbereich: %@", themaString]; //Semikolon und Leerzeichen am Anfang, damit die Teile voneinander getrennt sind
//        }
//    }
//    
//    //der String f√ºr die Schwierigkeit der Frage
//    if (self.frage.schwierigkeit) {
//        NSString *schwierigkeitString = self.frage.schwierigkeit.stringValue;
//        //wenn der String leer ist oder keiner ist, dann h√§nge ihn nicht an den detailLabelString, ansonsten schon
//        if (schwierigkeitString.length > 0 && ![schwierigkeitString isEqualToString:@""]) {
//            detailLabelString = [detailLabelString stringByAppendingFormat:@"; Schwierigkeit: %@", schwierigkeitString];
//        }
//    }
//    
//    //der String f√ºr das Datum, an dem die Frage zur lokalen Datenbank hinzugef√ºgt wurde
//    if (self.frage.hinzugefuegtAm) {
//        NSString *datumString = [self.frage.hinzugefuegtAm datumUndUhrzeitString];
//        //wenn der String leer ist oder keiner ist, dann h√§nge ihn nicht an den detailLabelString, ansonsten schon
//        if (datumString.length > 0 && ![datumString isEqualToString:@""]) {
//            detailLabelString = [detailLabelString stringByAppendingFormat:@"; hinzugef√ºgt Am: %@", datumString];
//        }
//    }

    
    //den erstellten Detail-String in das Label setzen
    self.frageDetailsLabel.text = detailLabelString;
    
    
    //wenn dieser ViewController nur das Ergebnis einer schon bereits beantworteten Frage anzeigen soll, dann setze den Titel des L√∂sen-Buttons auf "L√∂sung anzeigen" und konfiguriere weitere Dinge
    if (self.nurAnzeigeVonErgebnis) {
        ///sagen, dass die Frage gel√∂st ist
        self.frageGeloest = YES;
        
        //feststellen, ob die Frage richtig gel√∂st wurde
        self.frageRichtigGeloest = [self.quiz frageRichtigBeantwortet:self.frage];
        
        //den L√∂sen-Button entsprechend konfigurieren
        [self setzeLoesungButtonAufRichtig:self.frageRichtigGeloest];
        
        //den weiter-Button aktivieren
        self.nextQuestionButton.enabled = YES;
    }
}

- (void)didReceiveMemoryWarning {
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}

/*
#pragma mark - Navigation

// In a storyboard-based application, you will often want to do a little preparation before navigation
- (void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender {
    // Get the new view controller using [segue destinationViewController].
    // Pass the selected object to the new view controller.
}
*/

#pragma mark - user interface Methoden
- (void)setzeLoesungButtonAufRichtig:(BOOL)richtig {
    //den Text des L√∂sen-Buttons auf L√∂sung anzeigen setzen
    [self.loesenButton setTitle:@"L√∂sung anzeigen" forState:UIControlStateNormal];
    
    //die Hintergrundfarbe entsprechend √§ndern, je nach dem, ob die Frage richtig oder falsch beantwortet wurde
    if (richtig) {
        //ein spezielles gr√ºn benutzen
        [self.loesenButton setBackgroundColor:[UIColor colorWithRed:0.71 green:0.81 blue:0.40 alpha:1.0]];
    }
    else {
        //ein spezielles rot benutzen
        [self.loesenButton setBackgroundColor:[UIColor colorWithRed:0.89 green:0.02 blue:0.07 alpha:1.0]];
    }
    
    //die Schriftfarbe des L√∂sen-Buttons auf wei√ü setzen
    [self.loesenButton setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
}

#pragma mark - Methoden 
///√ºberpr√ºft die Frage und gibt einen Boolean zur√ºck, der angibt, ob der User die Frage richtig beantwortet hat
- (BOOL)ueberpruefeFrage {
    //z√§hlt die Anzahl der falschen Antwortenim unten folgenden √úberpr√ºfungsprozess der Fragen --> wird sp√§ter daf√ºr genutzt, ob die ganze Frage wirklich korrekt beantwortet wurde
    int anzahlFalscherAntworten = 0;
    
    //die mit den Antworten-Buttons verbundenen Antworten durchgehen und √ºberpr√ºfen
    for (AntwortButton *antwortButton in self.alleAntwortenButtons) {
        //die Antwort, die vom jeweiligen Antwort-Button angezeigt wird
        Antwort *antwort = antwortButton.displayingAntwort;
        
        //√ºberpr√ºfen, ob die Antwort richtig ist und das mit der ausgew√§hlt-Property des AntwortButtons vergleichen
        if (antwort.richtig.boolValue == antwortButton.ausgewaehlt) {
            //markiere diesen Antwort-Button als richtig oder eben als falsch, je nachdem ob die Frage richtig oder falsch ist --> sollte das zur Verwirrung f√ºhren: obige if-Bedingung √ºberpr√ºft, ob der User richtig geantwortet hat, der Button soll aber nur seine bei der richtigen Antwort seine Farbe √§ndern
            if (antwort.richtig.boolValue) {
                [antwortButton markiereAlsRichtig:YES];
                
                //beim Button angeben, dass die richtige Antwort vom benutzer gegeben wurde --> wichtig f√ºr sp√§ter eventuell erfolgende Anzeige des Ergebnisses einer einzelnen Frage durch den User
                antwort.gesetzteAntwort = AntwortRichtig;
            }
            else {
                //in diesem Fall hat der Benutzer den jeweiligen Button des aktuellen Schleifendurchlaufs nicht ausgew√§hlt --> er hat also keine Antwort gesetzt
                antwort.gesetzteAntwort = AntwortNichtGesetzt; //--> ist wichtig, dieses trotzdem zu setzen, damit nicht bei der Anzeige des Ergebnisses einer Frage ein eventuelles Ergebnis aus einem vorherigem Quiz angezeigt wird
            }
        }
        else {
            //markiere den Antwort-Button als falsch
            [antwortButton markiereAlsRichtig:NO];
            
            antwort.gesetzteAntwort = AntwortFalsch;
            
            //z√§hle die Variable, die die Anzahl der falschen Antworten z√§hlt, hoch
            anzahlFalscherAntworten++;
        }
    }
    
    //die entsprechende Instanzvariable setzen, die angibt, dass die Frage gel√∂st wurde
    self.frageGeloest = YES;
    
    
    //wenn falsche Antworten gegeben wurden, dann return NO
    if (anzahlFalscherAntworten > 0) {
        self.frageRichtigGeloest = NO;
        return NO;
    }
    //ansonsten alles richtig --> return YES
    self.frageRichtigGeloest = YES;
    
    return YES;
}

#pragma mark - Actions
- (IBAction)naechsteFrage:(id)sender {
    //beim Quiz die aktuelle Frage als richtig markieren oder eben als falsch
    [self.quiz frage:self.frage richtigBeantwortet:self.frageRichtigGeloest];
    
    //teile dem Delegate mit, dass die Beantwortung der Frage erfolgreich abgeschlossen wurde
    if (self.delegate && [self.delegate respondsToSelector:@selector(quizfrageAbfrageViewController:frageBeantwortet:)]) {
        [self.delegate quizfrageAbfrageViewController:self frageBeantwortet:self.frage];
    }
}

- (IBAction)cancelButtonClicked:(id)sender {
    //einen AlertController anzeigen, der fragt, ob das Quiz wirklich abgebrochen werden soll --> wenn dieser ViewController nur zur Anzeige eines Ergebnisses von einer Frage genutzt wird, dann gib die M√∂glichkeit an, zur Ergebnis-Seite zu gelangen
    UIAlertController *alertController = [UIAlertController alertControllerWithTitle:@"Wirklich abbrechen?" message:@"M√∂chtest du das Quiz wirklich abbrechen?" preferredStyle:UIAlertControllerStyleActionSheet];
    
    //Quiz fortf√ºhren - Action
    [alertController addAction:[UIAlertAction actionWithTitle:@"Nein, weiter lernen üéí" style:UIAlertActionStyleCancel handler:nil]];
    
    //Quiz abbrechen Actions
    NSString *quizCancelButtonTitle = self.nurAnzeigeVonErgebnis ? @"Quiz komplett beenden!" : @"Abbrechen ‚òπÔ∏è";
    [alertController addAction:[UIAlertAction actionWithTitle:quizCancelButtonTitle style:UIAlertActionStyleDestructive handler:^(UIAlertAction * _Nonnull action) {
        //dem Delegate, also dem Page-View-Controller sagen, dass sich dieser um die Anzeige der Ergebnis-Seite k√ºmmern soll, die standardm√§√üig angezeigt werden soll
        if ([self.delegate respondsToSelector:@selector(quizfrageAbfrageViewController:userRequestedToCancelQuizWithShowingErgebnis:)]) {
            [self.delegate quizfrageAbfrageViewController:self userRequestedToCancelQuizWithShowingErgebnis:YES];
        }
    }]];
    
    //wenn nur das Ergebnis angezeigt werden soll, dann gebe noch die M√∂glichkeit, zur Ergebnisseite zur√ºckzukehren
    if (self.nurAnzeigeVonErgebnis) {
        //eine neue alert-action hinzuf√ºgen
        [alertController addAction:[UIAlertAction actionWithTitle:@"üîô zur√ºck zu den Ergebnissen... " style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {
            //hier die entsprechende Delegate-Methode aufrufen (vom parent-page-view-controller), um zur Ergebnis-Seite zur√ºckzukehren
            if (self.delegate && [self.delegate respondsToSelector:@selector(quizfrageAbfrageViewControllerRequestToShowResultsPage:)]) {
                [self.delegate quizfrageAbfrageViewControllerRequestToShowResultsPage:self];
            }
        }]];
    }
    
    //den Alert-Controller anzeigen
    [self presentViewController:alertController animated:YES completion:nil];
    
}

///l√∂st die Frage, die durch diesen View dargestellt sit
- (IBAction)frageLoesen:(id)sender {
    //wenn Frage bereits gel√∂st wurde, dann zeige die L√∂sung an, ansonsten l√∂se die Frage
    if (self.frageGeloest) {
        UIAlertController *loesungView = [UIAlertController alertControllerWithTitle:@"L√∂sung" message:[self.frage allgemeinerAntwortString] preferredStyle:UIAlertControllerStyleAlert];
        
        [loesungView addAction:[UIAlertAction actionWithTitle:@"ok" style:UIAlertActionStyleDefault handler:nil]];
        
        [self presentViewController:loesungView animated:YES completion:nil];
        
        return;
    }
    
    //die Frage √ºberpr√ºfen
    BOOL richtig = [self ueberpruefeFrage];

    //den L√∂sungs-Button entsprechend konfiguriert anzeigen
    [self setzeLoesungButtonAufRichtig:richtig];
    
    //die Antwort-Buttons deaktivieren oder so einstellen, dass sie die Details zu ihrer Antwort anzeigen (letzteres sp√§ter vielleicht irgendwann einmal)
    for (AntwortButton *antwortButton in self.alleAntwortenButtons) {
        antwortButton.enabled = NO;
    }

    //den weiter-Button aktivieren
    self.nextQuestionButton.enabled = YES;
}

#pragma mark - die einzelnen Buttons der einzelnen Antworten und ihre Actions
//die einzelnen Button-Actions
- (IBAction)button1Clicked:(AntwortButton *)sender {
    //wenn Frage gel√∂st wurde, dann einen AlertController anzeigen, der die Hilfe zu dieser Antwort anzeigt...
    
    //...ansonsten das "Standard-Verfahren" anwenden.
    [sender setzeButtonAufAusgewaehlt:!sender.ausgewaehlt];
}

- (IBAction)button2Clicked:(AntwortButton *)sender {
    [sender setzeButtonAufAusgewaehlt:!sender.ausgewaehlt];
}

- (IBAction)button3Clicked:(AntwortButton *)sender {
    [sender setzeButtonAufAusgewaehlt:!sender.ausgewaehlt];
}

- (IBAction)button4Clicked:(AntwortButton *)sender {
    [sender setzeButtonAufAusgewaehlt:!sender.ausgewaehlt];
}
@end
